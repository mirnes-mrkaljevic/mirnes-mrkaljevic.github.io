<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://optimalcoder.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://optimalcoder.net/" rel="alternate" type="text/html" /><updated>2025-04-23T16:49:12+00:00</updated><id>https://optimalcoder.net/feed.xml</id><title type="html">Optimal Coder</title><subtitle>This is a blog dedicated to software development, offering insights into coding practices, design principles, and industry challenges.</subtitle><author><name>Mirnes Mrkaljevic</name></author><entry><title type="html">Understanding State Machines with a Practical Example in C#</title><link href="https://optimalcoder.net/understanding-state-machines-with-a-practical-example-in-csharp" rel="alternate" type="text/html" title="Understanding State Machines with a Practical Example in C#" /><published>2025-04-21T00:00:00+00:00</published><updated>2025-04-21T00:00:00+00:00</updated><id>https://optimalcoder.net/understanding-state-machines-with-a-practical-example-in-csharp</id><content type="html" xml:base="https://optimalcoder.net/understanding-state-machines-with-a-practical-example-in-csharp"><![CDATA[<p>State machines might sound like a complex topic, but at their core, they’re just a way to manage different states in a system and control how things transition from one state to another.</p>

<p>In this post, we’ll break down what state machines are, why they’re useful, and how to implement one in C# using a straightforward approach. We’ll also walk through a real-world example to see them in action.</p>

<h2 id="what-is-a-state-machine">What is a State Machine?</h2>

<p>A state machine is a pattern used to control the flow of a system by defining possible states and the rules that determine how transitions between those states happen. It consists of:</p>

<ul>
  <li>
    <p><strong>States</strong> : Different conditions or modes the system can be in.</p>
  </li>
  <li>
    <p><strong>Transitions</strong> : Rules that define how the system moves from one state to another.</p>
  </li>
  <li>
    <p><strong>Events</strong> : Triggers that cause state transitions.</p>
  </li>
  <li>
    <p><strong>Actions</strong> : Operations performed when entering, exiting, or staying in a state.</p>
  </li>
</ul>

<h2 id="why-use-a-state-machine">Why Use a State Machine?</h2>

<p>State machines provide several benefits when managing workflows:</p>

<ul>
  <li>
    <p><strong>Improved Readability</strong> : Helps organize complex logic in an understandable way.</p>
  </li>
  <li>
    <p><strong>Encapsulation of State Logic</strong> : Keeps state-specific behavior separate from other business logic.</p>
  </li>
  <li>
    <p><strong>Predictability and Maintainability</strong> : Makes it easier to track and debug state changes.</p>
  </li>
  <li>
    <p><strong>Flexibility</strong> : New states and transitions can be added without major changes.</p>
  </li>
</ul>

<h2 id="implementing-a-state-machine-in-c">Implementing a State Machine in C#</h2>

<p>Let’s implement a simple state machine using a dictionary to manage state transitions.</p>

<h3 id="use-case-order-processing-system">Use Case: Order Processing System</h3>

<p>Imagine you’re building an e-commerce application that handles order statuses. An order can go through several states before completion.</p>

<h3 id="states-and-transitions">States and Transitions</h3>

<ul>
  <li>
    <p><strong>States</strong> : <code class="language-plaintext highlighter-rouge">PendingPayment</code>, <code class="language-plaintext highlighter-rouge">Processing</code>, <code class="language-plaintext highlighter-rouge">Shipped</code>, <code class="language-plaintext highlighter-rouge">Delivered</code>, <code class="language-plaintext highlighter-rouge">Cancelled</code></p>
  </li>
  <li>
    <p><strong>Events</strong> :</p>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Pay</code> (moves from PendingPayment to Processing)</li>
      <li><code class="language-plaintext highlighter-rouge">Ship</code> (moves from Processing to Shipped)</li>
      <li><code class="language-plaintext highlighter-rouge">Deliver</code> (moves from Shipped to Delivered)</li>
      <li><code class="language-plaintext highlighter-rouge">Cancel</code> (moves from PendingPayment to Cancelled or from Processing to Cancelled)</li>
    </ul>
  </li>
</ul>

<h3 id="c-implementation">C# Implementation</h3>

<ul>
  <li><strong>State Machine Logic</strong> :</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">OrderStateMachine</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">enum</span> <span class="n">OrderState</span> <span class="p">{</span> <span class="n">PendingPayment</span><span class="p">,</span> <span class="n">Processing</span><span class="p">,</span> <span class="n">Shipped</span><span class="p">,</span> <span class="n">Delivered</span><span class="p">,</span> <span class="n">Cancelled</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">enum</span> <span class="n">OrderTrigger</span> <span class="p">{</span> <span class="n">Pay</span><span class="p">,</span> <span class="n">Ship</span><span class="p">,</span> <span class="n">Deliver</span><span class="p">,</span> <span class="n">Cancel</span> <span class="p">}</span>

    <span class="k">private</span> <span class="n">Dictionary</span><span class="p">&lt;(</span><span class="n">OrderState</span><span class="p">,</span> <span class="n">OrderTrigger</span><span class="p">),</span> <span class="n">OrderState</span><span class="p">&gt;</span> <span class="n">_stateTransitions</span><span class="p">;</span>
    <span class="k">public</span> <span class="n">OrderState</span> <span class="n">CurrentState</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">OrderStateMachine</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">CurrentState</span> <span class="p">=</span> <span class="n">OrderState</span><span class="p">.</span><span class="n">PendingPayment</span><span class="p">;</span>
        <span class="n">_stateTransitions</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;(</span><span class="n">OrderState</span><span class="p">,</span> <span class="n">OrderTrigger</span><span class="p">),</span> <span class="n">OrderState</span><span class="p">&gt;</span>
        <span class="p">{</span>
            <span class="p">{</span> <span class="p">(</span><span class="n">OrderState</span><span class="p">.</span><span class="n">PendingPayment</span><span class="p">,</span> <span class="n">OrderTrigger</span><span class="p">.</span><span class="n">Pay</span><span class="p">),</span> <span class="n">OrderState</span><span class="p">.</span><span class="n">Processing</span> <span class="p">},</span>
            <span class="p">{</span> <span class="p">(</span><span class="n">OrderState</span><span class="p">.</span><span class="n">PendingPayment</span><span class="p">,</span> <span class="n">OrderTrigger</span><span class="p">.</span><span class="n">Cancel</span><span class="p">),</span> <span class="n">OrderState</span><span class="p">.</span><span class="n">Cancelled</span> <span class="p">},</span>
            <span class="p">{</span> <span class="p">(</span><span class="n">OrderState</span><span class="p">.</span><span class="n">Processing</span><span class="p">,</span> <span class="n">OrderTrigger</span><span class="p">.</span><span class="n">Ship</span><span class="p">),</span> <span class="n">OrderState</span><span class="p">.</span><span class="n">Shipped</span> <span class="p">},</span>
            <span class="p">{</span> <span class="p">(</span><span class="n">OrderState</span><span class="p">.</span><span class="n">Processing</span><span class="p">,</span> <span class="n">OrderTrigger</span><span class="p">.</span><span class="n">Cancel</span><span class="p">),</span> <span class="n">OrderState</span><span class="p">.</span><span class="n">Cancelled</span> <span class="p">},</span>
            <span class="p">{</span> <span class="p">(</span><span class="n">OrderState</span><span class="p">.</span><span class="n">Shipped</span><span class="p">,</span> <span class="n">OrderTrigger</span><span class="p">.</span><span class="n">Deliver</span><span class="p">),</span> <span class="n">OrderState</span><span class="p">.</span><span class="n">Delivered</span> <span class="p">}</span>
        <span class="p">};</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">ProcessTransition</span><span class="p">(</span><span class="n">OrderTrigger</span> <span class="n">trigger</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_stateTransitions</span><span class="p">.</span><span class="nf">TryGetValue</span><span class="p">((</span><span class="n">CurrentState</span><span class="p">,</span> <span class="n">trigger</span><span class="p">),</span> <span class="k">out</span> <span class="n">OrderState</span> <span class="n">newState</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Moving from </span><span class="p">{</span><span class="n">CurrentState</span><span class="p">}</span><span class="s"> to </span><span class="p">{</span><span class="n">newState</span><span class="p">}</span><span class="s"> due to </span><span class="p">{</span><span class="n">trigger</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
            <span class="n">CurrentState</span> <span class="p">=</span> <span class="n">newState</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Invalid transition: </span><span class="p">{</span><span class="n">CurrentState</span><span class="p">}</span><span class="s"> cannot handle </span><span class="p">{</span><span class="n">trigger</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><strong>Client</strong> :</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">orderStateMachine</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">OrderStateMachine</span><span class="p">();</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Initial state: </span><span class="p">{</span><span class="n">orderStateMachine</span><span class="p">.</span><span class="n">CurrentState</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>

        <span class="c1">// Simulating order processing</span>
        <span class="n">orderStateMachine</span><span class="p">.</span><span class="nf">ProcessTransition</span><span class="p">(</span><span class="n">OrderStateMachine</span><span class="p">.</span><span class="n">OrderTrigger</span><span class="p">.</span><span class="n">Pay</span><span class="p">);</span>
        <span class="n">orderStateMachine</span><span class="p">.</span><span class="nf">ProcessTransition</span><span class="p">(</span><span class="n">OrderStateMachine</span><span class="p">.</span><span class="n">OrderTrigger</span><span class="p">.</span><span class="n">Ship</span><span class="p">);</span>
        <span class="n">orderStateMachine</span><span class="p">.</span><span class="nf">ProcessTransition</span><span class="p">(</span><span class="n">OrderStateMachine</span><span class="p">.</span><span class="n">OrderTrigger</span><span class="p">.</span><span class="n">Deliver</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="how-it-works">How It Works</h3>

<ol>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">OrderStateMachine</code> class encapsulates state logic, making the main program cleaner.</p>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">CurrentState</code> property tracks the current order state.</p>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">_stateTransitions</code> dictionary holds valid state transitions.</p>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">ProcessTransition()</code> method checks for valid transitions and updates the state.</p>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">Main</code> method initializes the state machine and processes transitions.</p>
  </li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>State machines are an excellent way to manage complex workflows in a clean, predictable manner. Using a simple dictionary in C#, we can build a flexible and maintainable system to handle order states. By encapsulating state logic in a class, we make our code cleaner, more modular, and easier to maintain. Whether you’re working on UI workflows, business processes, or game logic, state machines provide a structured approach to managing state transitions effectively.</p>]]></content><author><name>Mirnes Mrkaljevic</name></author><category term="cleancode" /><category term="csharp" /><category term="designpatterns" /><category term="statemachine" /><summary type="html"><![CDATA[State machines might sound like a complex topic, but at their core, they’re just a way to manage different states in a system and control how things transition from one state to another.]]></summary></entry><entry><title type="html">Design Patterns: Prototype</title><link href="https://optimalcoder.net/design-patterns-prototype" rel="alternate" type="text/html" title="Design Patterns: Prototype" /><published>2025-04-14T00:00:00+00:00</published><updated>2025-04-14T00:00:00+00:00</updated><id>https://optimalcoder.net/design-patterns-prototype</id><content type="html" xml:base="https://optimalcoder.net/design-patterns-prototype"><![CDATA[<p>In software development, there are scenarios where creating multiple objects with similar attributes and configurations is necessary. Instead of constructing each object from scratch, a more efficient approach is to duplicate an existing instance. This is precisely what the <strong>Prototype Design Pattern</strong> facilitates.</p>

<h2 id="what-is-the-prototype-pattern">What is the Prototype Pattern?</h2>

<p>The Prototype pattern is a creational design pattern that focuses on cloning objects. Rather than instantiating new objects directly, this pattern allows for the creation of copies of existing instances. This can be particularly beneficial when object creation is expensive or complex.</p>

<h2 id="benefits-of-using-the-prototype-pattern">Benefits of Using the Prototype Pattern</h2>

<ul>
  <li>
    <p><strong>Improved Performance</strong> – If object creation involves expensive operations such as database queries or intensive computations, cloning can optimize performance.</p>
  </li>
  <li>
    <p><strong>Simplified Object Initialization</strong> – When an object requires extensive setup, cloning eliminates redundant initialization steps.</p>
  </li>
  <li>
    <p><strong>Dynamic Object Modifications</strong> – Prototypes can be modified at runtime, enabling flexible object creation.</p>
  </li>
</ul>

<h2 id="implementing-the-prototype-pattern-in-c">Implementing the Prototype Pattern in C#</h2>

<h3 id="general-approach">General Approach</h3>

<p>A common way to implement the Prototype pattern is by defining a prototype interface that declares a cloning method. This ensures that all implementing classes provide their own cloning logic, allowing for consistent object duplication.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IPrototype</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="n">T</span> <span class="nf">Clone</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Using a generic interface allows different types to define their own cloning mechanisms while ensuring type safety. In C#, there is already provided <code class="language-plaintext highlighter-rouge">ICloneable</code> interface which has the same intention.</p>

<h3 id="step-1-implement-a-concrete-class">Step 1: Implement a Concrete Class</h3>

<p>Consider a <code class="language-plaintext highlighter-rouge">Car</code> class that implements <code class="language-plaintext highlighter-rouge">ICloneable</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Car</span> <span class="p">:</span> <span class="n">ICloneable</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Model</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Color</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    
    <span class="k">public</span> <span class="nf">Car</span><span class="p">(</span><span class="kt">string</span> <span class="n">model</span><span class="p">,</span> <span class="kt">string</span> <span class="n">color</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Model</span> <span class="p">=</span> <span class="n">model</span><span class="p">;</span>
        <span class="n">Color</span> <span class="p">=</span> <span class="n">color</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="kt">object</span> <span class="nf">Clone</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Car</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">Model</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">Color</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
  

</code></pre></div></div>

<h3 id="step-2-clone-objects">Step 2: Clone Objects</h3>

<p>Now, we can create and modify cloned objects efficiently:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Car</span> <span class="n">car1</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Car</span><span class="p">(</span><span class="s">"Tesla Model S"</span><span class="p">,</span> <span class="s">"Red"</span><span class="p">);</span>
<span class="n">Car</span> <span class="n">car2</span> <span class="p">=</span> <span class="p">(</span><span class="n">Car</span><span class="p">)</span><span class="n">car1</span><span class="p">.</span><span class="nf">Clone</span><span class="p">();</span>
<span class="n">car2</span><span class="p">.</span><span class="n">Color</span> <span class="p">=</span> <span class="s">"Blue"</span><span class="p">;</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Car1: </span><span class="p">{</span><span class="n">car1</span><span class="p">.</span><span class="n">Model</span><span class="p">}</span><span class="s">, </span><span class="p">{</span><span class="n">car1</span><span class="p">.</span><span class="n">Color</span><span class="p">}</span><span class="s">"</span><span class="p">);</span> <span class="c1">// Output: Car1: Tesla Model S, Red</span>
<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Car2: </span><span class="p">{</span><span class="n">car2</span><span class="p">.</span><span class="n">Model</span><span class="p">}</span><span class="s">, </span><span class="p">{</span><span class="n">car2</span><span class="p">.</span><span class="n">Color</span><span class="p">}</span><span class="s">"</span><span class="p">);</span> <span class="c1">// Output: Car2: Tesla Model S, Blue</span>
  

</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">car2</code> instance is cloned from <code class="language-plaintext highlighter-rouge">car1</code>, and its color is modified independently.</p>

<h2 id="when-to-use-the-prototype-pattern">When to Use the Prototype Pattern</h2>

<p>This pattern is particularly useful when:</p>

<ul>
  <li>Object creation is resource-intensive, and cloning provides a more efficient alternative.</li>
  <li>There is a need to generate multiple similar objects dynamically.</li>
  <li>Avoiding complex initialization logic enhances maintainability.</li>
</ul>

<h2 id="when-not-to-use-the-prototype-pattern">When Not to Use the Prototype Pattern</h2>

<ul>
  <li>If object creation is straightforward, cloning may introduce unnecessary complexity.</li>
  <li>If an object depends on external resources that should not be duplicated, such as database connections.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>The Prototype Design Pattern is a practical solution for optimizing object creation in C#. By leveraging the <code class="language-plaintext highlighter-rouge">ICloneable</code> interface, we can efficiently create and modify objects while maintaining code simplicity and efficiency.</p>]]></content><author><name>Mirnes Mrkaljevic</name></author><category term="cleancode" /><category term="csharp" /><category term="designpatterns" /><category term="prototype" /><summary type="html"><![CDATA[In software development, there are scenarios where creating multiple objects with similar attributes and configurations is necessary. Instead of constructing each object from scratch, a more efficient approach is to duplicate an existing instance. This is precisely what the Prototype Design Pattern facilitates.]]></summary></entry><entry><title type="html">Code Review Best Practices</title><link href="https://optimalcoder.net/code-review-best-practices" rel="alternate" type="text/html" title="Code Review Best Practices" /><published>2025-04-07T00:00:00+00:00</published><updated>2025-04-07T00:00:00+00:00</updated><id>https://optimalcoder.net/code-review-best-practices</id><content type="html" xml:base="https://optimalcoder.net/code-review-best-practices"><![CDATA[<p>Code reviews are a crucial part of writing great software. They help maintain code quality, catch bugs early, and improve collaboration. But if done poorly, they can be frustrating, time-consuming, and even demotivating. So, how do you make your code reviews effective and useful?</p>

<h2 id="what-to-do">What to Do?</h2>

<h3 id="1-prioritize-code-quality-and-maintainability">1. <strong>Prioritize Code Quality and Maintainability</strong></h3>

<ul>
  <li>
    <p>Make sure the code follows best practices and style guidelines.</p>
  </li>
  <li>
    <p>Check for ways to improve performance and efficiency.</p>
  </li>
  <li>
    <p>Ensure the code is easy to read and well-structured.</p>
  </li>
</ul>

<h3 id="2-give-constructive-respectful-feedback">2. <strong>Give Constructive, Respectful Feedback</strong></h3>

<ul>
  <li>
    <p>Focus on helping, not just pointing out mistakes.</p>
  </li>
  <li>
    <p>Offer suggestions rather than just criticism.</p>
  </li>
  <li>
    <p>Highlight things that were done well, not just areas that need improvement.</p>
  </li>
</ul>

<h3 id="3-ensure-the-code-is-properly-tested">3. <strong>Ensure the Code is Properly Tested</strong></h3>

<ul>
  <li>
    <p>Look for unit tests and integration tests where needed.</p>
  </li>
  <li>
    <p>Check for edge cases and possible failure points.</p>
  </li>
  <li>
    <p>Make sure tests actually pass before approving the PR.</p>
  </li>
</ul>

<h3 id="4-look-out-for-security-and-performance-issues">4. <strong>Look Out for Security and Performance Issues</strong></h3>

<ul>
  <li>
    <p>Watch for common security risks like SQL injection, XSS, and hardcoded secrets.</p>
  </li>
  <li>
    <p>Keep an eye on database queries and API calls for efficiency.</p>
  </li>
  <li>
    <p>Avoid unnecessary complexity that could slow things down.</p>
  </li>
</ul>

<h3 id="5-make-sure-the-code-solves-the-right-problem">5. <strong>Make Sure the Code Solves the Right Problem</strong></h3>

<ul>
  <li>
    <p>Confirm that the implementation matches the requirements.</p>
  </li>
  <li>
    <p>If there are UI changes, make sure they align with design specs.</p>
  </li>
  <li>
    <p>Double-check that the solution is practical and efficient.</p>
  </li>
</ul>

<h3 id="6-encourage-small-manageable-prs">6. <strong>Encourage Small, Manageable PRs</strong></h3>

<ul>
  <li>
    <p>Reviewing smaller pull requests is faster and more effective.</p>
  </li>
  <li>
    <p>Give feedback promptly so you don’t block progress.</p>
  </li>
  <li>
    <p>Encourage breaking big changes into smaller, focused updates.</p>
  </li>
</ul>

<h3 id="7-use-automation-to-catch-basic-issues">7. <strong>Use Automation to Catch Basic Issues</strong></h3>

<ul>
  <li>
    <p>Rely on linters and static analysis tools for style enforcement.</p>
  </li>
  <li>
    <p>Let CI/CD pipelines handle basic testing and code coverage checks.</p>
  </li>
  <li>
    <p>Automate formatting so you don’t have to waste time on minor faults.</p>
  </li>
</ul>

<h2 id="what-not-to-do">What Not to Do?</h2>

<h3 id="1-dont-make-it-personal">1. <strong>Don’t Make It Personal</strong></h3>

<ul>
  <li>
    <p>Critique the code, not the developer.</p>
  </li>
  <li>
    <p>Use respectful, inclusive language.</p>
  </li>
  <li>
    <p>Remember that everyone, no matter how experienced, makes mistakes.</p>
  </li>
</ul>

<h3 id="2-dont-rush-through-the-review">2. <strong>Don’t Rush Through The Review</strong></h3>

<ul>
  <li>
    <p>Take the time to understand the code before commenting.</p>
  </li>
  <li>
    <p>Avoid approvals without actually checking the details.</p>
  </li>
  <li>
    <p>Make sure your feedback is clear and actionable.</p>
  </li>
</ul>

<h3 id="3-dont-hold-up-reviews-for-too-long">3. <strong>Don’t Hold Up Reviews For Too Long</strong></h3>

<ul>
  <li>
    <p>Give feedback as soon as possible to keep things moving.</p>
  </li>
  <li>
    <p>If you’re busy, let the team know so they can adjust expectations.</p>
  </li>
</ul>

<h3 id="4-dont-expect-perfection-right-away">4. <strong>Don’t Expect Perfection Right Away</strong></h3>

<ul>
  <li>
    <p>It’s okay if the first draft isn’t perfect—focus on incremental improvements.</p>
  </li>
  <li>
    <p>Balance high standards with realistic expectations.</p>
  </li>
</ul>

<h3 id="5-dont-overcomplicate-things">5. <strong>Don’t Overcomplicate Things</strong></h3>

<ul>
  <li>
    <p>Keep suggestions practical and easy to follow.</p>
  </li>
  <li>
    <p>Avoid unnecessary refactoring unless it truly improves the code.</p>
  </li>
</ul>

<h2 id="final-thoughts">Final Thoughts</h2>

<p>Code reviews should be a positive, collaborative process. They’re not just about finding mistakes—they’re about making the code better and helping each other grow as developers. Keep feedback constructive, focus on maintainability, and use automation where you can to make the process smoother. Most importantly, remember that you are all on the same team, and that you are improving your product together.</p>

<p>Happy coding and happy reviewing!</p>]]></content><author><name>Mirnes Mrkaljevic</name></author><category term="cleancode" /><category term="codereview" /><category term="coding" /><category term="developer" /><summary type="html"><![CDATA[Code reviews are a crucial part of writing great software. They help maintain code quality, catch bugs early, and improve collaboration. But if done poorly, they can be frustrating, time-consuming, and even demotivating. So, how do you make your code reviews effective and useful?]]></summary></entry><entry><title type="html">TDD and Mocking</title><link href="https://optimalcoder.net/tdd-and-mocking" rel="alternate" type="text/html" title="TDD and Mocking" /><published>2025-04-01T00:00:00+00:00</published><updated>2025-04-01T00:00:00+00:00</updated><id>https://optimalcoder.net/tdd-and-mocking</id><content type="html" xml:base="https://optimalcoder.net/tdd-and-mocking"><![CDATA[<p>In the <a href="https://mirnes-mrkaljevic.github.io/unit-testing-and-test-driven-development-tdd-in-csharp">last post</a> we have discussed core principles of unit testing and TDD. In this post, we’ll walk through a simple example of how to use <strong>Moq</strong>  as mocking framework and <strong>Dependency Injection</strong> with <strong>NUnit</strong> in the context of <strong>Test-Driven Development (TDD)</strong> in C#. This combination allows for clean, maintainable tests by mocking dependencies and focusing on the behavior of the system under test.</p>

<p>Imagine we have an application where we process payments through a <code class="language-plaintext highlighter-rouge">PaymentService</code>. This service depends on an external <code class="language-plaintext highlighter-rouge">IPaymentGateway</code> interface to make the actual payment.</p>

<p>Let’s break this down step by step.</p>

<h3 id="step-1-write-the-test-first-before-code">Step 1: Write the Test First (Before Code)</h3>

<p>We want to test the <code class="language-plaintext highlighter-rouge">PaymentService</code>, which depends on the <code class="language-plaintext highlighter-rouge">IPaymentGateway</code>. Our first test will focus on making sure the <code class="language-plaintext highlighter-rouge">PaymentService</code> behaves correctly when making a valid payment.</p>

<p>Here’s the test code:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Moq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">NUnit.Framework</span><span class="p">;</span>

<span class="p">[</span><span class="n">TestFixture</span><span class="p">]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">PaymentServiceTests</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IPaymentGateway</span><span class="p">&gt;</span> <span class="n">_mockPaymentGateway</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">PaymentService</span> <span class="n">_paymentService</span><span class="p">;</span>

    <span class="p">[</span><span class="n">SetUp</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Setup</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// Create the mock object</span>
        <span class="n">_mockPaymentGateway</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IPaymentGateway</span><span class="p">&gt;();</span>

        <span class="c1">// Inject the mock into the PaymentService</span>
        <span class="n">_paymentService</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PaymentService</span><span class="p">(</span><span class="n">_mockPaymentGateway</span><span class="p">.</span><span class="n">Object</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">Test</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">MakePayment_WhenAmountIsValid_ShouldReturnTrue</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// Arrange</span>
        <span class="kt">var</span> <span class="n">amount</span> <span class="p">=</span> <span class="m">100</span><span class="n">m</span><span class="p">;</span> <span class="c1">// Valid amount</span>
        <span class="n">_mockPaymentGateway</span><span class="p">.</span><span class="nf">Setup</span><span class="p">(</span><span class="n">gateway</span> <span class="p">=&gt;</span> <span class="n">gateway</span><span class="p">.</span><span class="nf">ProcessPayment</span><span class="p">(</span><span class="n">amount</span><span class="p">)).</span><span class="nf">Returns</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>

        <span class="c1">// Act</span>
        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">_paymentService</span><span class="p">.</span><span class="nf">MakePayment</span><span class="p">(</span><span class="n">amount</span><span class="p">);</span>

        <span class="c1">// Assert</span>
        <span class="n">Assert</span><span class="p">.</span><span class="nf">IsTrue</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="step-2-run-the-test-it-will-fail">Step 2: Run the Test (It Will Fail)</h3>

<p>Since we haven’t implemented the <code class="language-plaintext highlighter-rouge">PaymentService</code> or the <code class="language-plaintext highlighter-rouge">IPaymentGateway</code> yet, running the test will result in a failure. The error message would indicate that the <code class="language-plaintext highlighter-rouge">PaymentService</code> and <code class="language-plaintext highlighter-rouge">IPaymentGateway</code> don’t exist yet.</p>

<p>Now we need to implement the minimal code to make this test pass.</p>

<h3 id="step-3-write-the-code-to-pass-the-test">Step 3: Write the Code to Pass the Test</h3>

<p>We need to create the <code class="language-plaintext highlighter-rouge">PaymentService</code> and <code class="language-plaintext highlighter-rouge">IPaymentGateway</code> interface so that the test can run successfully.</p>

<p>Here’s the implementation of the <code class="language-plaintext highlighter-rouge">IPaymentGateway</code> interface and the <code class="language-plaintext highlighter-rouge">PaymentService</code> class:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IPaymentGateway</span>
<span class="p">{</span>
    <span class="kt">bool</span> <span class="nf">ProcessPayment</span><span class="p">(</span><span class="kt">decimal</span> <span class="n">amount</span><span class="p">);</span>
<span class="p">}</span><span class="k">public</span> <span class="k">class</span> <span class="nc">PaymentService</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IPaymentGateway</span> <span class="n">_paymentGateway</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">PaymentService</span><span class="p">(</span><span class="n">IPaymentGateway</span> <span class="n">paymentGateway</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_paymentGateway</span> <span class="p">=</span> <span class="n">paymentGateway</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">MakePayment</span><span class="p">(</span><span class="kt">decimal</span> <span class="n">amount</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Business logic for validating amount (e.g., check if it's positive)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">amount</span> <span class="p">&lt;=</span> <span class="m">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// Process the payment through the gateway</span>
        <span class="k">return</span> <span class="n">_paymentGateway</span><span class="p">.</span><span class="nf">ProcessPayment</span><span class="p">(</span><span class="n">amount</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="step-4-run-the-test-again-it-should-pass">Step 4: Run the Test Again (It Should Pass)</h3>

<p>Now that we’ve implemented the <code class="language-plaintext highlighter-rouge">PaymentService</code> and <code class="language-plaintext highlighter-rouge">IPaymentGateway</code>, we can run the test again.</p>

<p>If everything is set up correctly, this time the test should pass. The output should indicate that the <code class="language-plaintext highlighter-rouge">MakePayment</code> method of the <code class="language-plaintext highlighter-rouge">PaymentService</code> is functioning as expected, returning <code class="language-plaintext highlighter-rouge">true</code> when a valid amount is passed and the gateway returns <code class="language-plaintext highlighter-rouge">true</code>.</p>

<h3 id="step-5-write-another-test-the-test-grow-approach">Step 5: Write Another Test (The Test-Grow Approach)</h3>

<p>The next step in TDD is to write another test for a different scenario. In this case, we will test when an invalid payment amount is passed (e.g., a negative or zero amount). Let’s write this test.</p>

<p>Here’s the next test:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">Test</span><span class="p">]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">MakePayment_WhenAmountIsInvalid_ShouldReturnFalse</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Arrange</span>
    <span class="kt">var</span> <span class="n">amount</span> <span class="p">=</span> <span class="p">-</span><span class="m">50</span><span class="n">m</span><span class="p">;</span> <span class="c1">// Invalid amount</span>
    <span class="n">_mockPaymentGateway</span><span class="p">.</span><span class="nf">Setup</span><span class="p">(</span><span class="n">gateway</span> <span class="p">=&gt;</span> <span class="n">gateway</span><span class="p">.</span><span class="nf">ProcessPayment</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">decimal</span><span class="p">&gt;())).</span><span class="nf">Returns</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>

    <span class="c1">// Act</span>
    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">_paymentService</span><span class="p">.</span><span class="nf">MakePayment</span><span class="p">(</span><span class="n">amount</span><span class="p">);</span>

    <span class="c1">// Assert</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">IsFalse</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="step-6-refactor-the-code-if-needed">Step 6: Refactor the Code if Needed</h3>

<p>Now, we have a test for the invalid case, and we should implement any additional logic if necessary to make this test pass. In our current code, the logic already returns <code class="language-plaintext highlighter-rouge">false</code> if the amount is less than or equal to <code class="language-plaintext highlighter-rouge">0</code>. This means the code is already correct, and we don’t need to change anything.</p>

<h2 id="conclusion">Conclusion</h2>

<p>This example demonstrates how to apply Test-Driven Development in C# with NUnit, Moq, and Dependency Injection. By mocking dependencies, you can easily test the behavior of your services without relying on the real implementations, making your tests faster and more reliable. Dependency injection ensures that dependencies are easily replaceable, promoting clean, maintainable code.</p>]]></content><author><name>Mirnes Mrkaljevic</name></author><category term="cleancode" /><category term="csharp" /><category term="tdd" /><category term="unittesting" /><category term="dependencyinjection" /><category term="moq" /><summary type="html"><![CDATA[In the last post we have discussed core principles of unit testing and TDD. In this post, we’ll walk through a simple example of how to use Moq as mocking framework and Dependency Injection with NUnit in the context of Test-Driven Development (TDD) in C#. This combination allows for clean, maintainable tests by mocking dependencies and focusing on the behavior of the system under test.]]></summary></entry><entry><title type="html">Dependency Injection In .NET Core With Strategy Pattern</title><link href="https://optimalcoder.net/dependency-injection-in-net-core-with-strategy-pattern" rel="alternate" type="text/html" title="Dependency Injection In .NET Core With Strategy Pattern" /><published>2025-03-24T00:00:00+00:00</published><updated>2025-03-24T00:00:00+00:00</updated><id>https://optimalcoder.net/dependency-injection-in-net-core-with-strategy-pattern</id><content type="html" xml:base="https://optimalcoder.net/dependency-injection-in-net-core-with-strategy-pattern"><![CDATA[<p>In the previous post, we gave an introduction and explained the basic concept of the <a href="https://mirnes-mrkaljevic.github.io/design-patterns-strategy">Strategy Pattern</a>. Now, we want to go a bit further and demonstrate how it works in practice alongside a dependency injection in .NET Core. Instead of manually instantiating strategies, we let the ASP.NET Core DI container inject the correct implementation at runtime.</p>

<h2 id="example">Example</h2>

<p>For the showing purposes, let us asume that we are implementing some payment service, and we want to use one service at the time, depending on user input.</p>

<p>For our strategy pattern, we would need following components:</p>

<p><strong>Interface</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IPaymentStrategy</span>
<span class="p">{</span>
    <span class="k">void</span> <span class="nf">Pay</span><span class="p">(</span><span class="kt">decimal</span> <span class="n">amount</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Concrete Strategies</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">CreditCardPayment</span> <span class="p">:</span> <span class="n">IPaymentStrategy</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Pay</span><span class="p">(</span><span class="kt">decimal</span> <span class="n">amount</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Paid $</span><span class="p">{</span><span class="n">amount</span><span class="p">}</span><span class="s"> using Credit Card."</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">PayPalPayment</span> <span class="p">:</span> <span class="n">IPaymentStrategy</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Pay</span><span class="p">(</span><span class="kt">decimal</span> <span class="n">amount</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Paid $</span><span class="p">{</span><span class="n">amount</span><span class="p">}</span><span class="s"> using PayPal."</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">BitcoinPayment</span> <span class="p">:</span> <span class="n">IPaymentStrategy</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Pay</span><span class="p">(</span><span class="kt">decimal</span> <span class="n">amount</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Paid $</span><span class="p">{</span><span class="n">amount</span><span class="p">}</span><span class="s"> using Bitcoin."</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Context</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IPaymentContext</span>
<span class="p">{</span>
    <span class="k">void</span> <span class="nf">ExecutePayment</span><span class="p">(</span><span class="kt">string</span> <span class="n">paymentMethod</span><span class="p">,</span> <span class="kt">decimal</span> <span class="n">amount</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">PaymentContext</span> <span class="p">:</span> <span class="n">IPaymentContext</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IServiceProvider</span> <span class="n">_serviceProvider</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">PaymentContext</span><span class="p">(</span><span class="n">IServiceProvider</span> <span class="n">serviceProvider</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_serviceProvider</span> <span class="p">=</span> <span class="n">serviceProvider</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">ExecutePayment</span><span class="p">(</span><span class="kt">string</span> <span class="n">paymentMethod</span><span class="p">,</span> <span class="kt">decimal</span> <span class="n">amount</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">IPaymentStrategy</span> <span class="n">strategy</span> <span class="p">=</span> <span class="n">paymentMethod</span> <span class="k">switch</span>
        <span class="p">{</span>
            <span class="s">"creditcard"</span> <span class="p">=&gt;</span> <span class="n">_serviceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">CreditCardPayment</span><span class="p">&gt;(),</span>
            <span class="s">"paypal"</span> <span class="p">=&gt;</span> <span class="n">_serviceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">PayPalPayment</span><span class="p">&gt;(),</span>
            <span class="s">"bitcoin"</span> <span class="p">=&gt;</span> <span class="n">_serviceProvider</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">BitcoinPayment</span><span class="p">&gt;(),</span>
            <span class="n">_</span> <span class="p">=&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">"Invalid payment method"</span><span class="p">)</span>
        <span class="p">};</span>

        <span class="n">strategy</span><span class="p">.</span><span class="nf">Pay</span><span class="p">(</span><span class="n">amount</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Next, we are implementing our controller:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>

<span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
<span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">PaymentController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IPaymentContext</span> <span class="n">_paymentContext</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">PaymentController</span><span class="p">(</span><span class="n">IPaymentContext</span> <span class="n">paymentContext</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_paymentContext</span> <span class="p">=</span> <span class="n">paymentContext</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"{paymentMethod}"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">ProcessPayment</span><span class="p">(</span><span class="kt">string</span> <span class="n">paymentMethod</span><span class="p">,</span> <span class="p">[</span><span class="n">FromBody</span><span class="p">]</span> <span class="kt">decimal</span> <span class="n">amount</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_paymentContext</span><span class="p">.</span><span class="nf">ExecutePayment</span><span class="p">(</span><span class="n">paymentMethod</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">(),</span> <span class="n">amount</span><span class="p">);</span>

        <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="s">$"Payment of $</span><span class="p">{</span><span class="n">amount</span><span class="p">}</span><span class="s"> processed using </span><span class="p">{</span><span class="n">paymentMethod</span><span class="p">}</span><span class="s">."</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>And, we register each payment strategy in Program.cs.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Builder</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Hosting</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="nf">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

<span class="c1">// Register concrete strategies</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">CreditCardPayment</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">PayPalPayment</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">BitcoinPayment</span><span class="p">&gt;();</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddTransient</span><span class="p">&lt;</span><span class="n">IPaymentContext</span><span class="p">,</span> <span class="n">PaymentContext</span><span class="p">&gt;();</span>


<span class="c1">// Register controllers</span>
<span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">UseHttpsRedirection</span><span class="p">();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">UseAuthorization</span><span class="p">();</span>
<span class="n">app</span><span class="p">.</span><span class="nf">MapControllers</span><span class="p">();</span>

<span class="n">app</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span>

</code></pre></div></div>

<h2 id="how-it-works">How It Works</h2>

<ul>
  <li>The DI container registers each strategy (CreditCardPayment, PayPalPayment, BitcoinPayment).</li>
  <li>The controller receives an IPaymentContext, which allows it to dynamically resolve the appropriate payment strategy.</li>
  <li>When a user makes a payment request, the context dynamically selects the strategy based on the URL parameter (creditcard, paypal, bitcoin).</li>
  <li>The selected strategy is injected into the PaymentContext and executed.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Finally, we can highlight some key points on why this approach offers significant benefits to the code structure.</p>

<ul>
  <li><strong>Loose Coupling</strong> – The controller does not depend on concrete implementations, making the code more flexible.</li>
  <li><strong>Easy Maintenance</strong> – New payment methods can be added without modifying existing code.</li>
  <li><strong>Testability</strong> – The strategies can be mocked and tested independently.</li>
  <li><strong>Runtime Flexibility</strong> – The payment method can be selected dynamically at runtime.</li>
</ul>]]></content><author><name>Mirnes Mrkaljevic</name></author><category term="csharp" /><category term="dependencyinjection" /><category term="netcore" /><category term="strategy" /><summary type="html"><![CDATA[In the previous post, we gave an introduction and explained the basic concept of the Strategy Pattern. Now, we want to go a bit further and demonstrate how it works in practice alongside a dependency injection in .NET Core. Instead of manually instantiating strategies, we let the ASP.NET Core DI container inject the correct implementation at runtime.]]></summary></entry><entry><title type="html">Unit Testing and Test-Driven Development (TDD) in C#</title><link href="https://optimalcoder.net/unit-testing-and-test-driven-development-tdd-in-csharp" rel="alternate" type="text/html" title="Unit Testing and Test-Driven Development (TDD) in C#" /><published>2025-03-24T00:00:00+00:00</published><updated>2025-03-24T00:00:00+00:00</updated><id>https://optimalcoder.net/unit-testing-and-test-driven-development-tdd-in-csharp</id><content type="html" xml:base="https://optimalcoder.net/unit-testing-and-test-driven-development-tdd-in-csharp"><![CDATA[<p>Writing code without unit tests can be risky—you might not realize issues until it’s too late. Unit testing helps make sure your code actually does what it’s supposed to. In this post, we’ll break down unit testing in C# using NUnit and explore how Test-Driven Development (TDD) can make your life easier.</p>

<h2 id="whats-unit-testing-anyway">What’s Unit Testing Anyway?</h2>

<p>Unit testing is all about testing small, isolated chunks of your code to make sure they work correctly. Instead of waiting until the whole application is built and then scrambling to fix bugs, unit tests let you catch issues early. In C#, we typically use frameworks like <strong>NUnit</strong> , <strong>xUnit</strong> , or <strong>MSTest</strong> to write and run these tests.</p>

<h3 id="why-should-you-care-about-unit-testing">Why Should You Care About Unit Testing?</h3>

<ul>
  <li>
    <p><strong>Find Bugs Early:</strong> Fixing issues sooner rather than later saves time (and headaches).</p>
  </li>
  <li>
    <p><strong>Make Your Code More Maintainable:</strong> Well-tested code is easier to update and improve.</p>
  </li>
  <li>
    <p><strong>Write Better Code:</strong> Writing testable code forces you to structure it well.</p>
  </li>
  <li>
    <p><strong>Acts as Documentation:</strong> Your tests describe what your code is supposed to do.</p>
  </li>
</ul>

<h2 id="what-is-test-driven-development-tdd">What is Test-Driven Development (TDD)?</h2>

<p>TDD is a mindset shift where you write your tests <strong>before</strong> you write the actual implementation. It follows a simple cycle:</p>

<ul>
  <li>Write a test that fails (because the feature doesn’t exist yet).</li>
  <li>Write just enough code to make the test pass.</li>
  <li>Refactor and clean up the code while keeping the test green.</li>
</ul>

<h3 id="why-bother-with-tdd">Why Bother with TDD?</h3>

<ul>
  <li>
    <p>Guarantees better test coverage.</p>
  </li>
  <li>
    <p>Helps you write only the code you actually need.</p>
  </li>
  <li>
    <p>Saves you time debugging later.</p>
  </li>
  <li>
    <p>Makes your code modular and easy to change.</p>
  </li>
  <li>
    <p>Every test case serves as a description of a use case, making tests a form of living documentation for your code.</p>
  </li>
  <li>
    <p>Encourages better code structure by promoting loose coupling, dependency injection, and composition-based design patterns.</p>
  </li>
</ul>

<h2 id="step-by-step-guide-tdd-with-nunit-in-c">Step-by-Step Guide: TDD with NUnit in C#</h2>

<h3 id="step-1-setting-up-nunit-in-your-project">Step 1: Setting Up NUnit in Your Project</h3>

<p>Getting started is easy:</p>

<ul>
  <li>Create a new NUnit Test Project in Visual Studio.</li>
  <li>Install NUnit and NUnit3TestAdapter via NuGet.</li>
  <li>Add a reference to the project containing the code you want to test.</li>
</ul>

<h3 id="step-2-write-a-failing-test">Step 2: Write a Failing Test</h3>

<p>Let’s use TDD to build a <strong>Calculator</strong> class with an <code class="language-plaintext highlighter-rouge">Add</code> method. First, create a test class <code class="language-plaintext highlighter-rouge">CalculatorTests.cs</code> and add this test:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">NUnit.Framework</span><span class="p">;</span>

<span class="p">[</span><span class="n">TestFixture</span><span class="p">]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">CalculatorTests</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">Test</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Add_TwoNumbers_ReturnsSum</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">calculator</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Calculator</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="p">=</span> <span class="n">calculator</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">);</span>
        <span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span> <span class="c1">// This test will fail since the method doesn’t exist yet</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="step-3-write-just-enough-code-to-pass-the-test">Step 3: Write Just Enough Code to Pass the Test</h3>

<p>Since our <code class="language-plaintext highlighter-rouge">Calculator</code> class and <code class="language-plaintext highlighter-rouge">Add</code> method don’t exist yet, let’s create them:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Calculator</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="nf">Add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">a</span> <span class="p">+</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Run the test—it should now pass!</p>

<h3 id="step-4-add-more-tests-and-implement-subtraction">Step 4: Add More Tests and Implement Subtraction</h3>

<p>Next, let’s implement a <code class="language-plaintext highlighter-rouge">Subtract</code> method using the same TDD approach.</p>

<ul>
  <li><strong>Write a test first:</strong></li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">Test</span><span class="p">]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">Subtract_TwoNumbers_ReturnsDifference</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">calculator</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Calculator</span><span class="p">();</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="p">=</span> <span class="n">calculator</span><span class="p">.</span><span class="nf">Subtract</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">3</span><span class="p">);</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span> <span class="c1">// This test will fail initially</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li><strong>Write just enough code to pass the test:</strong></li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="kt">int</span> <span class="nf">Subtract</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">a</span> <span class="p">-</span> <span class="n">b</span><span class="p">;</span>

</code></pre></div></div>

<ul>
  <li><strong>Refactor if needed to keep your code clean and efficient.</strong></li>
</ul>

<h3 id="step-5-run-and-verify-your-tests">Step 5: Run and Verify Your Tests</h3>

<p>Use Visual Studio’s <strong>Test Explorer</strong> to run all your tests. If they pass, congrats! You’ve successfully followed the TDD cycle.</p>

<h2 id="how-tdd-improves-code-structure">How TDD Improves Code Structure</h2>

<p>If TDD is applied properly, the following structural benefits emerge:</p>

<ul>
  <li>
    <p><strong>Loose Coupling:</strong> Since tests require isolating components, TDD encourages designing classes that don’t depend too much on each other.</p>
  </li>
  <li>
    <p><strong>Dependency Injection:</strong> Writing testable code often means injecting dependencies instead of hardcoding them, leading to better modularity.</p>
  </li>
  <li>
    <p><strong>Composition Over Inheritance:</strong> Rather than relying too much on inheritance, TDD pushes towards a <strong>composition-based</strong> approach, making code more flexible.</p>
  </li>
  <li>
    <p><strong>Separation of Concerns:</strong> Following the TDD cycle helps ensure each class has a single responsibility, making it easier to maintain and extend.</p>
  </li>
  <li>
    <p><strong>Improved Testability:</strong> The necessity to test first forces developers to create well-structured, reusable components that are easier to test in isolation.</p>
  </li>
</ul>

<h3 id="pro-tips-for-writing-good-unit-tests">Pro Tips for Writing Good Unit Tests</h3>

<ul>
  <li>
    <p>Stick to the AAA (Arrange-Act-Assert) pattern to keep tests clean and readable.</p>
  </li>
  <li>
    <p>Make tests independent—don’t let them rely on external data or states.</p>
  </li>
  <li>
    <p>Use mocking frameworks like Moq to isolate dependencies.</p>
  </li>
  <li>
    <p>Keep tests fast and focused—each test should check just one thing.</p>
  </li>
  <li>
    <p>Avoid over-testing trivial methods like simple property getters.</p>
  </li>
</ul>

<h2 id="wrapping-up">Wrapping Up</h2>

<p>Unit testing (especially with TDD) makes your code more reliable, easier to maintain, and less prone to bugs. Since each test case describes a specific use case, they double as a form of documentation for how your code is expected to behave. Additionally, applying TDD properly leads to better code structure through <strong>dependency injection, loose coupling, and composition-based patterns</strong>.</p>

<p>In the next post, we’ll dive deeper into <strong>mocking</strong> —an essential technique for isolating dependencies and making unit tests more effective. Stay tuned!</p>]]></content><author><name>Mirnes Mrkaljevic</name></author><category term="cleancode" /><category term="csharp" /><category term="tdd" /><category term="unittesting" /><summary type="html"><![CDATA[Writing code without unit tests can be risky—you might not realize issues until it’s too late. Unit testing helps make sure your code actually does what it’s supposed to. In this post, we’ll break down unit testing in C# using NUnit and explore how Test-Driven Development (TDD) can make your life easier.]]></summary></entry><entry><title type="html">How To Pay Programmers Less</title><link href="https://optimalcoder.net/how-to-pay-programmers-less" rel="alternate" type="text/html" title="How To Pay Programmers Less" /><published>2025-03-17T00:00:00+00:00</published><updated>2025-03-17T00:00:00+00:00</updated><id>https://optimalcoder.net/how-to-pay-programmers-less</id><content type="html" xml:base="https://optimalcoder.net/how-to-pay-programmers-less"><![CDATA[<p>Before we kick off, just a quick mention that the intention of this post is pure fun, so please don’t take it too seriously! :) ….</p>

<p>Hiring and retaining top programming talent is expensive, but reducing costs doesn’t have to mean cutting corners. Instead of simply lowering salaries, businesses can use smart (and slightly sneaky) strategies to optimize their workforce, keep developers motivated, and ensure productivity remains high while keeping costs manageable.</p>

<h2 id="create-a-family-like-environment">Create a Family Like Environment</h2>

<p>Because nothing says “family” like a workplace where you’re expected to answer emails at midnight! But seriously, a strong company culture can make employees feel valued and connected, reducing turnover and salary demands. Foster a workplace that emphasizes:</p>

<ul>
  <li>
    <p><strong>Open communication</strong> : Encourage feedback and transparency to build trust. Just be sure to ignore any feedback that involves “higher salaries.”</p>
  </li>
  <li>
    <p><strong>Team bonding activities</strong> : Regular pizza parties, yearly company events, and casual outings help employees feel part of a supportive family (one that conveniently pays them less).</p>
  </li>
  <li>
    <p><strong>Mentorship programs</strong> : Pairing junior developers with experienced mentors strengthens team cohesion and conveniently reduces the need for expensive senior hires.</p>
  </li>
  <li>
    <p><strong>Recognition and appreciation</strong> : Celebrate achievements with shoutouts, small rewards, or—if you’re feeling generous—an extra slice of pizza at the next party.</p>
  </li>
</ul>

<h2 id="offer-non-moneraty-perks">Offer Non-Moneraty Perks</h2>

<p>Competitive salaries attract programmers, but additional perks can reduce the pressure on salary increases. Consider offering:</p>

<ul>
  <li>
    <p><strong>Remote work opportunities</strong> (so they can code in pajamas, which is priceless).</p>
  </li>
  <li>
    <p><strong>Flexible schedules</strong> to improve job satisfaction (and also make it easier for them to work late without realizing it).</p>
  </li>
  <li>
    <p><strong>Equity or profit-sharing</strong> to align developer interests with company success (which may or may not ever be worth anything).</p>
  </li>
  <li>
    <p><strong>Pizza parties and yearly company events</strong> to keep morale high while pay stays low.</p>
  </li>
</ul>

<h2 id="hire-junior-developers-and-train-them">Hire Junior Developers and Train Them</h2>

<p>Senior developers demand higher salaries, and who needs that? Hire promising junior developers and upskill them instead! Bonus: Juniors are too fresh to realize how underpaid they are.</p>

<h2 id="optimize-team-size">Optimize Team Size</h2>

<p>Bigger teams don’t always mean better results. A smaller, highly skilled team can often outperform a larger, less experienced one. The trick? Just never tell your existing team that you won’t be replacing the three developers who just quit.</p>

<h2 id="use-performance-based-compensation">Use Performance-Based Compensation</h2>

<p>Instead of high base salaries, offer performance-based incentives. Bonuses tied to project completion, efficiency, or quality metrics can help reduce fixed costs while keeping programmers motivated. A modest 3% yearly raise can be positioned as a “reward”—even though it barely covers inflation.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Lowering programmer costs doesn’t have to mean paying unfair wages or sacrificing quality. By optimizing processes, leveraging automation, using alternative hiring strategies, and fostering a family-like work environment (minus the inheritance), companies can maintain a strong development team while managing expenses wisely.</p>

<p>By applying these strategies, businesses can ensure they are paying only what is necessary while still attracting and retaining top talent—because where else are they going to go, right?</p>]]></content><author><name>Mirnes Mrkaljevic</name></author><category term="developer" /><category term="job" /><summary type="html"><![CDATA[Before we kick off, just a quick mention that the intention of this post is pure fun, so please don’t take it too seriously! :) ….]]></summary></entry><entry><title type="html">Design Patterns: Decorator</title><link href="https://optimalcoder.net/design-patterns-decorator" rel="alternate" type="text/html" title="Design Patterns: Decorator" /><published>2025-03-10T00:00:00+00:00</published><updated>2025-03-10T00:00:00+00:00</updated><id>https://optimalcoder.net/design-patterns-decorator</id><content type="html" xml:base="https://optimalcoder.net/design-patterns-decorator"><![CDATA[<p>The Decorator Pattern is a structural design pattern that allows behavior to be dynamically added to individual objects, without modifying their code. It is often used to extend the functionalities of classes in a flexible and reusable way.</p>

<h2 id="when-to-use-it">When To Use It?</h2>

<ul>
  <li><strong>You Need to Add Behavior Dynamically at Runtime.</strong> Example: A coffee shop app where users can customize their drinks with add-ons like Milk, Sugar, Whipped Cream, etc.</li>
  <li><strong>You Want to Avoid a Large Inheritance Tree.</strong>  If you use inheritance, each combination of behaviors would require a new subclass (e.g., <code class="language-plaintext highlighter-rouge">CoffeeWithMilk</code>, <code class="language-plaintext highlighter-rouge">CoffeeWithSugar</code>, <code class="language-plaintext highlighter-rouge">CoffeeWithMilkAndSugar</code>, etc.).</li>
  <li><strong>You Want More Flexible and Reusable Code.</strong> Different decorators can be reused independently. Example: A LoggingDecorator, CompressionDecorator, and EncryptionDecorator can be used separately or in different orders.</li>
  <li><strong>You Follow the Open-Closed Principle.</strong> Instead of modifying an existing class, you can extend behavior using decorators. This makes your code more maintainable.</li>
  <li><strong>You Need to Combine Multiple Independent Behaviors.</strong> Example: A text editor where you can apply bold, italics, and underline without modifying the base class.</li>
</ul>

<h2 id="when-not-to-use-it">When Not To Use It?</h2>

<ul>
  <li><strong>The Object’s Behavior Doesn’t Change at Runtime.</strong> If an object’s behavior is fixed and won’t need modifications dynamically.</li>
  <li><strong>The Number of Possible Combinations is Small</strong></li>
  <li><strong>Alternative Patterns Are Simpler.</strong> If you need different behaviors but don’t need stacking, the <a href="https://mirnes-mrkaljevic.github.io/design-patterns-strategy">strategy</a> pattern may be a better choice. If you have a few known configurations, a <a href="https://mirnes-mrkaljevic.github.io/design-patterns-factory-method">factory</a> might be more maintainable.</li>
</ul>

<h2 id="example-in-c"><strong>Example in C#</strong></h2>

<p><strong>Interface</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">ICoffee</span>
<span class="p">{</span>
    <span class="kt">string</span> <span class="nf">GetDescription</span><span class="p">();</span>
    <span class="kt">double</span> <span class="nf">GetCost</span><span class="p">();</span>
<span class="p">}</span>
  
</code></pre></div></div>

<p><strong>Concrete Component Implementation</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">SimpleCoffee</span> <span class="p">:</span> <span class="n">ICoffee</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="nf">GetDescription</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="s">"Simple Coffee"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">double</span> <span class="nf">GetCost</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="m">5.0</span><span class="p">;</span> <span class="c1">// Base price of coffee</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Abstract Decorator</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">CoffeeDecorator</span> <span class="p">:</span> <span class="n">ICoffee</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="n">ICoffee</span> <span class="n">_coffee</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">CoffeeDecorator</span><span class="p">(</span><span class="n">ICoffee</span> <span class="n">coffee</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_coffee</span> <span class="p">=</span> <span class="n">coffee</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="nf">GetDescription</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_coffee</span><span class="p">.</span><span class="nf">GetDescription</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">virtual</span> <span class="kt">double</span> <span class="nf">GetCost</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_coffee</span><span class="p">.</span><span class="nf">GetCost</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Concrete Decorators</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">MilkDecorator</span> <span class="p">:</span> <span class="n">CoffeeDecorator</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">MilkDecorator</span><span class="p">(</span><span class="n">ICoffee</span> <span class="n">coffee</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">coffee</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">GetDescription</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_coffee</span><span class="p">.</span><span class="nf">GetDescription</span><span class="p">()</span> <span class="p">+</span> <span class="s">", Milk"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">double</span> <span class="nf">GetCost</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_coffee</span><span class="p">.</span><span class="nf">GetCost</span><span class="p">()</span> <span class="p">+</span> <span class="m">1.5</span><span class="p">;</span> <span class="c1">// Extra cost for milk</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">SugarDecorator</span> <span class="p">:</span> <span class="n">CoffeeDecorator</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">SugarDecorator</span><span class="p">(</span><span class="n">ICoffee</span> <span class="n">coffee</span><span class="p">)</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">coffee</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">GetDescription</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_coffee</span><span class="p">.</span><span class="nf">GetDescription</span><span class="p">()</span> <span class="p">+</span> <span class="s">", Sugar"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">double</span> <span class="nf">GetCost</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_coffee</span><span class="p">.</span><span class="nf">GetCost</span><span class="p">()</span> <span class="p">+</span> <span class="m">0.5</span><span class="p">;</span> <span class="c1">// Extra cost for sugar</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Client</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// Create a simple coffee</span>
        <span class="n">ICoffee</span> <span class="n">coffee</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SimpleCoffee</span><span class="p">();</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"</span><span class="p">{</span><span class="n">coffee</span><span class="p">.</span><span class="nf">GetDescription</span><span class="p">()}</span><span class="s"> - $</span><span class="p">{</span><span class="n">coffee</span><span class="p">.</span><span class="nf">GetCost</span><span class="p">()}</span><span class="s">"</span><span class="p">);</span>

        <span class="c1">// Add milk to the coffee</span>
        <span class="n">coffee</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MilkDecorator</span><span class="p">(</span><span class="n">coffee</span><span class="p">);</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"</span><span class="p">{</span><span class="n">coffee</span><span class="p">.</span><span class="nf">GetDescription</span><span class="p">()}</span><span class="s"> - $</span><span class="p">{</span><span class="n">coffee</span><span class="p">.</span><span class="nf">GetCost</span><span class="p">()}</span><span class="s">"</span><span class="p">);</span>

        <span class="c1">// Add sugar to the coffee</span>
        <span class="n">coffee</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SugarDecorator</span><span class="p">(</span><span class="n">coffee</span><span class="p">);</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"</span><span class="p">{</span><span class="n">coffee</span><span class="p">.</span><span class="nf">GetDescription</span><span class="p">()}</span><span class="s"> - $</span><span class="p">{</span><span class="n">coffee</span><span class="p">.</span><span class="nf">GetCost</span><span class="p">()}</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>The Decorator Pattern is a great tool for extending functionality dynamically while keeping the base code clean and modular. It is widely used in the .NET Core framework and its libraries to provide flexible and extendable functionality. Some of the usages are:</p>

<ul>
  <li><strong>Middleware Pipeline</strong> ,  app.UseMiddleware()</li>
  <li><strong>Logging</strong>, <code class="language-plaintext highlighter-rouge">ILogger</code> with multiple providers (<code class="language-plaintext highlighter-rouge">Console</code>, <code class="language-plaintext highlighter-rouge">Debug</code>, etc.)</li>
  <li><strong>Caching</strong>, <code class="language-plaintext highlighter-rouge">IMemoryCache</code>, <code class="language-plaintext highlighter-rouge">IDistributedCache</code></li>
</ul>]]></content><author><name>Mirnes Mrkaljevic</name></author><category term="csharp" /><category term="decorator" /><category term="designpatterns" /><category term="softwarearhitecture" /><summary type="html"><![CDATA[The Decorator Pattern is a structural design pattern that allows behavior to be dynamically added to individual objects, without modifying their code. It is often used to extend the functionalities of classes in a flexible and reusable way.]]></summary></entry><entry><title type="html">Testable WinForms Applications (MVP pattern)</title><link href="https://optimalcoder.net/testable-winforms-applications-mvp-pattern" rel="alternate" type="text/html" title="Testable WinForms Applications (MVP pattern)" /><published>2025-03-03T00:00:00+00:00</published><updated>2025-03-03T00:00:00+00:00</updated><id>https://optimalcoder.net/testable-winforms-applications-mvp-pattern</id><content type="html" xml:base="https://optimalcoder.net/testable-winforms-applications-mvp-pattern"><![CDATA[<p>Today, WinForms apps mainly belong to legacy code because of increasing popularity of WPF. And when one team decides about the development stack for the brand new desktop application, they mainly vote for WPF. On the other hand, there are demands for WinForms applications when it is needed to upgrade existing software which is tightly coupled with WinForms, demands for higher performance, etc.</p>

<h2 id="different-approaches">Different Approaches</h2>

<p>There are many opinions on the subject about testable WinForms apps. Some claim that it’s not possible to test WinForms apps because there is a lot of dependency between user events and business logic.</p>

<p>Standard Windows Form contains Designer.cs partial class and a partial class which contains event handlers for user actions. So, if we follow this same principle and try to implement app logic in event handlers, we can conclude that it would be very hard to write tests for this kind of application. But, if we look at this problem from some distance, we can conclude that every application with user interface could be represented as an interaction between three main components: Data, User Interface and Business Logic.</p>

<p>This is the basic idea of MV* patterns. If we succeed to segregate these three components, then our application is on a good way to be testable. I made a simple WinForms app using MVP pattern. The entire project could be fetched from <a href="https://github.com/mirnes-mrkaljevic/testable-winforms-app">github</a>.</p>

<p>In this post, I would just use code snippets to give a general idea of how the code looks like.</p>

<h2 id="but-first-few-words-about-mvp-pattern">But First, Few Words About MVP Pattern</h2>

<p>MVP stands for Model-View-Presenter. Model is a component that contains data. It is just a data holder for our forms. View represents the User Interface. It contains design description of our form. Presenter is a component that does most of the job in our WinForms app. It is subscribed to view events and those events are results of user interaction with our form (clicks on buttons, text change, selection change, etc.) and OS interaction with our form (load, show, paint, etc.). Presenter needs to handle all these events and, after their processing, make appropriate action on the view.</p>

<h2 id="code-structure">Code Structure</h2>

<p>Let’s start with our view component.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IProductView</span>
<span class="p">{</span>
     <span class="k">event</span> <span class="n">EventHandler</span> <span class="n">ViewLoad</span><span class="p">;</span>
     <span class="k">event</span> <span class="n">EventHandler</span><span class="p">&lt;</span><span class="n">ProductViewModel</span><span class="p">&gt;</span> <span class="n">AddNewProduct</span><span class="p">;</span>
     <span class="k">event</span> <span class="n">EventHandler</span><span class="p">&lt;</span><span class="n">ProductViewModel</span><span class="p">&gt;</span> <span class="n">ModifyProduct</span><span class="p">;</span>
     <span class="k">event</span> <span class="n">EventHandler</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">DeleteProduct</span><span class="p">;</span>
     <span class="k">event</span> <span class="n">EventHandler</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">ProductSelected</span><span class="p">;</span>

     <span class="k">void</span> <span class="nf">PopulateDataGridView</span><span class="p">(</span><span class="n">IList</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="n">products</span><span class="p">);</span>
     <span class="k">void</span> <span class="nf">ClearInputControls</span><span class="p">();</span>
     <span class="k">void</span> <span class="nf">ShowMessage</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">Products</span> <span class="p">:</span> <span class="n">Form</span><span class="p">,</span> <span class="n">IProductView</span>
<span class="p">{</span>
    <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We created an interface IProductView that defines rules how Presenter and User Interface component will interact. Now, let’s take a look at our presenter component.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">ProductPresenter</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="n">IProductView</span> <span class="n">view</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">IProductDataAccess</span> <span class="n">dataAccesService</span><span class="p">;</span>
    
    <span class="k">public</span> <span class="nf">ProductPresenter</span><span class="p">(</span><span class="n">IProductView</span> <span class="n">view</span><span class="p">,</span> <span class="n">IProductDataAccess</span> <span class="n">dataAccesService</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">view</span> <span class="p">=</span> <span class="n">view</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="n">dataAccesService</span> <span class="p">=</span> <span class="n">dataAccesService</span><span class="p">;</span>
        <span class="nf">SubsribeToViewEvents</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">SubsribeToViewEvents</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">view</span><span class="p">.</span><span class="n">ViewLoad</span> <span class="p">+=</span> <span class="n">View_Load</span><span class="p">;</span>
        <span class="n">view</span><span class="p">.</span><span class="n">AddNewProduct</span> <span class="p">+=</span> <span class="n">View_AddNewProduct</span><span class="p">;</span>
        <span class="n">view</span><span class="p">.</span><span class="n">ProductSelected</span> <span class="p">+=</span> <span class="n">View_ProductSelected</span><span class="p">;</span>
        <span class="n">view</span><span class="p">.</span><span class="n">ModifyProduct</span> <span class="p">+=</span> <span class="n">View_ModifyProduct</span><span class="p">;</span>
        <span class="n">view</span><span class="p">.</span><span class="n">DeleteProduct</span> <span class="p">+=</span> <span class="n">View_DeleteProduct</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Our presenter takes IProductView interface in its constructor. By this way, our view (form) can easily be replaced with another view which implements the same interface. Also, when it comes to mocking, we can easily inject this dependency through constructor. Another component is IProductDataAccess which represents database interface.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IProductDataAccess</span>
<span class="p">{</span>
    <span class="n">IList</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span> <span class="nf">GetAllProducts</span><span class="p">();</span>
    <span class="n">Product</span> <span class="nf">GetProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">);</span>
    <span class="kt">bool</span> <span class="nf">AddProduct</span><span class="p">(</span><span class="n">Product</span> <span class="n">product</span><span class="p">);</span>
    <span class="kt">bool</span> <span class="nf">DeleteProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">productId</span><span class="p">);</span>
    <span class="kt">bool</span> <span class="nf">EditProduct</span><span class="p">(</span><span class="kt">int</span> <span class="n">productId</span><span class="p">,</span> <span class="n">Product</span> <span class="n">product</span><span class="p">);</span>

    <span class="kt">string</span> <span class="n">ErrorMessage</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
  

</code></pre></div></div>

<h2 id="one-test-case-example">One Test Case Example</h2>

<p>This test case shows how we can easily mock external dependencies in Presenter component.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="p">[</span><span class="n">Test</span><span class="p">]</span>
 <span class="k">public</span> <span class="k">void</span> <span class="nf">ExpectToCallAddProductOnAppropriateEventReceived</span><span class="p">()</span>
 <span class="p">{</span>
     <span class="n">IProductView</span> <span class="n">view</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IProductView</span><span class="p">&gt;();</span>
     <span class="n">IProductDataAccess</span> <span class="n">dataAccess</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IProductDataAccess</span><span class="p">&gt;();</span>
     <span class="n">ProductPresenter</span> <span class="n">presenter</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ProductPresenter</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">dataAccess</span><span class="p">);</span>
           
     <span class="n">ProductViewModel</span> <span class="n">viewModel</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ProductViewModel</span><span class="p">()</span>
     <span class="p">{</span>
         <span class="n">NameText</span> <span class="p">=</span> <span class="s">"Test"</span><span class="p">,</span>
         <span class="n">PriceText</span> <span class="p">=</span> <span class="s">"2"</span>
     <span class="p">};</span>
           
     <span class="n">view</span><span class="p">.</span><span class="n">AddNewProduct</span> <span class="p">+=</span> 
          <span class="n">Raise</span><span class="p">.</span><span class="n">Event</span><span class="p">&lt;</span><span class="n">EventHandler</span><span class="p">&lt;</span><span class="n">ProductViewModel</span><span class="p">&gt;&gt;(</span><span class="n">view</span><span class="p">,</span> <span class="n">viewModel</span><span class="p">);</span>
     <span class="n">dataAccess</span><span class="p">.</span><span class="nf">Received</span><span class="p">().</span><span class="nf">AddProduct</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Is</span><span class="p">&lt;</span><span class="n">Product</span><span class="p">&gt;</span>
                           <span class="p">(</span><span class="n">x</span><span class="p">=&gt;</span><span class="n">x</span><span class="p">.</span><span class="n">Price</span> <span class="p">==</span> <span class="m">2</span> <span class="p">&amp;&amp;</span> <span class="n">x</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="s">"Test"</span><span class="p">));</span>
 <span class="p">}</span>
  

</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>This is just a simple example of how powerful an architecture that starts with an abstraction can be. It is always better to start with some components on the higher level and then, defining the interfaces, you define rules how those components will interact with each other.</p>]]></content><author><name>Mirnes Mrkaljevic</name></author><category term="csharp" /><category term="designpatterns" /><category term="mvp" /><category term="winforms" /><summary type="html"><![CDATA[Today, WinForms apps mainly belong to legacy code because of increasing popularity of WPF. And when one team decides about the development stack for the brand new desktop application, they mainly vote for WPF. On the other hand, there are demands for WinForms applications when it is needed to upgrade existing software which is tightly coupled with WinForms, demands for higher performance, etc.]]></summary></entry><entry><title type="html">Design Patterns: Strategy</title><link href="https://optimalcoder.net/design-patterns-strategy" rel="alternate" type="text/html" title="Design Patterns: Strategy" /><published>2025-02-17T00:00:00+00:00</published><updated>2025-02-17T00:00:00+00:00</updated><id>https://optimalcoder.net/design-patterns-strategy</id><content type="html" xml:base="https://optimalcoder.net/design-patterns-strategy"><![CDATA[<p>The Strategy Pattern is a behavioral design pattern that defines a family of algorithms, encapsulates each one, and makes them interchangeable. This pattern allows the algorithm to be selected at runtime, providing flexibility in designing software. It’s particularly useful when you have multiple ways of performing a task, and you want to choose the implementation dynamically without altering the client code.</p>

<h2 id="when-to-use-it">When To Use It?</h2>

<ul>
  <li><strong>You Have Multiple Algorithms or Behaviors.</strong> Use it when you have a need for muplitple ways of performing a task, and you want to make these implementations interchangeable. Examples: Different sorting algorithms, payment methods, discount calculations…</li>
  <li><strong>You Want to Eliminate Conditional Logic.</strong> If you find yourself writing large if-else or switch statements to decide which algorithm to use, this pattern can simplify and clean up your code. Examples: A game character with different attack styles</li>
  <li><strong>You Need Runtime Flexibility.</strong> Use this pattern if the choice of algorithm or behavior needs to be decided dynamically at runtime rather than compile-time. Example: A game character that changes its movement strategy based on terrain type.</li>
</ul>

<h2 id="when-not-to-use-it">When Not To Use It?</h2>

<ul>
  <li><strong>The Behavior is Unlikely to Change.</strong> If the behavior or algorithm is stable and unlikely to require changes, introducing the this pattern may add unnecessary complexity. Example: A basic calculator where operations (add, subtract) are fixed.</li>
  <li><strong>You Don’t Need Runtime Flexibility.</strong> If the algorithm is chosen at compile-time or hardcoded, the strategy pattern is overkill.</li>
  <li><strong>Strategies Require Too Much Shared State.</strong> If the strategies rely heavily on the internal state of the context class, they can become tightly coupled, defeating the purpose of the pattern.</li>
</ul>

<h2 id="key-components">Key Components</h2>

<ul>
  <li><strong>Strategy Interface:</strong> Defines a common interface for all the algorithms (strategies).</li>
  <li><strong>Concrete Strategies:</strong> Implement different versions of the algorithm defined in the strategy interface.</li>
  <li><strong>Context:</strong> Maintains a reference to a Strategy object and delegates the work to the strategy.</li>
</ul>

<h2 id="example-in-c">Example in C#</h2>

<p><strong>Interface</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IMoveStrategy</span>
<span class="p">{</span>
    <span class="k">void</span> <span class="nf">Move</span><span class="p">();</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Concrete Strategies</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Crouch</span> <span class="p">:</span> <span class="n">IMoveStrategy</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Move</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Character is crouching slowly..."</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Walk</span> <span class="p">:</span> <span class="n">IMoveStrategy</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Move</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Character is walking at a normal pace..."</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Run</span> <span class="p">:</span> <span class="n">IMoveStrategy</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Move</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Character is running fast..."</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Context</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">CharacterContext</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="n">IMoveStrategy</span> <span class="n">_moveStrategy</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">CharacterContext</span><span class="p">(</span><span class="n">IMoveStrategy</span> <span class="n">moveStrategy</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_moveStrategy</span> <span class="p">=</span> <span class="n">moveStrategy</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">SetMovementStrategy</span><span class="p">(</span><span class="n">IMoveStrategy</span> <span class="n">moveStrategy</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_moveStrategy</span> <span class="p">=</span> <span class="n">moveStrategy</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">ExecuteMove</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">_moveStrategy</span><span class="p">.</span><span class="nf">Move</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p><strong>Client</strong></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Create a character with an initial movement strategy (Walk)</span>
        <span class="n">CharacterContext</span> <span class="n">character</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CharacterContext</span><span class="p">(</span><span class="k">new</span> <span class="nf">Walk</span><span class="p">());</span>

        <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"\nChoose movement: crouch, walk, run, or exit."</span><span class="p">);</span>
            <span class="kt">string</span> <span class="n">input</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="nf">ReadLine</span><span class="p">()?.</span><span class="nf">ToLower</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">input</span> <span class="p">==</span> <span class="s">"exit"</span><span class="p">)</span>
                <span class="k">break</span><span class="p">;</span>

            <span class="c1">// Manually select the strategy based on user input</span>
            <span class="n">IMoveStrategy</span> <span class="n">selectedStrategy</span> <span class="p">=</span> <span class="n">input</span> <span class="k">switch</span>
            <span class="p">{</span>
                <span class="s">"crouch"</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Crouch</span><span class="p">(),</span>
                <span class="s">"walk"</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Walk</span><span class="p">(),</span>
                <span class="s">"run"</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Run</span><span class="p">(),</span>
                <span class="n">_</span> <span class="p">=&gt;</span> <span class="k">null</span>
            <span class="p">};</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">selectedStrategy</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">character</span><span class="p">.</span><span class="nf">SetMovementStrategy</span><span class="p">(</span><span class="n">selectedStrategy</span><span class="p">);</span>
                <span class="n">character</span><span class="p">.</span><span class="nf">ExecuteMove</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Invalid input! Please enter crouch, walk, or run."</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>The Strategy Pattern provides flexibility, scalability, and cleaner code, making it a great choice for scenarios like game character movement, AI behavior, and dynamic algorithm selection.</p>]]></content><author><name>Mirnes Mrkaljevic</name></author><category term="cleancode" /><category term="csharp" /><category term="designpatterns" /><category term="strategy" /><summary type="html"><![CDATA[The Strategy Pattern is a behavioral design pattern that defines a family of algorithms, encapsulates each one, and makes them interchangeable. This pattern allows the algorithm to be selected at runtime, providing flexibility in designing software. It’s particularly useful when you have multiple ways of performing a task, and you want to choose the implementation dynamically without altering the client code.]]></summary></entry></feed>